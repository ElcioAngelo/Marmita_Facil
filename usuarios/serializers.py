from rest_framework import serializers
from .models import Usuario
from .models import Restaurante
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework_simplejwt.exceptions import AuthenticationFailed
from django.contrib.auth import authenticate
from .models import Pedido
class UsuarioSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = Usuario
        fields = ['nome', 
                  'password',
                  'sobrenome',
                  'email',
                  'cidade',
                  'endereco',
                  'estado',
                  'numero_telefone',
                  'role'
                ]

    def create(self, validated_data):
        password = validated_data.pop('password')
        user = Usuario.objects.create_user(password=password, **validated_data)
        return user 

    def update(self, instance, validated_data):
        request = self.context.get('request')
        user_requesting = request.user if request else None 


        ## Se não for superusuário, impede a troca de cargo. 
        if 'role' in validated_data:
            pode_alterar_cargo = (
                user_requesting 
                and (user_requesting.is_superuser or user_requesting.role == 'admin')
            )

        if not pode_alterar_cargo:
            validated_data.pop('role') ## Remove a tentativa não autorizada.
        
        ## Remove a senha ao retornar os valores. 
        password = validated_data.pop('password', None)

        for attr, value in validated_data.items():
            setattr(instance, attr, value)

        if password:
            instance.set_password(password)
        
        instance.save()
        return instance 
    
class EmailTokenObtainPairSerializer(TokenObtainPairSerializer):
    username_field = 'email'

    def validate(self, attrs):
        username = attrs.get(self.username_field)
        password = attrs.get("password")

        if username and password:
            user = authenticate(username=username, password=password)

            if not user:
                raise AuthenticationFailed(('Credenciais inválidas'), code='authentication_failed')
            elif not username or not password:
                raise AuthenticationFailed(('Por favor preencha todos os campos!'), code='authentication_failed')
        refresh = self.get_token(user)
        data = {
            'refresh': str(refresh),
            'access': str(refresh.access_token),
            'user_id': user.id,
            'email': user.email,
            'role': user.role
        }
        return data
    
    

class PedidoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Pedido
        fields = '__all__'
        read_only_fields = ['usuario','data_pedido'] ## * Impede de alterar os campos manualmente.
        
        def create(self, validated_data):
            request = self.context.get('request')
            if request and request.user.is_authenticated:
                validated_data['usuario'] = request.user
            return Pedido.objects.create(**validated_data)
        
        
class RestauranteSerializer(serializers.ModelSerializer):
    codigo = serializers.IntegerField(read_only=True)  # readonly, generated by backend
    class Meta:
        model = Restaurante
        fields = ['id', 'usuario','codigo','marmita','nome','descricao']
        read_only_fields = ['codigo','usuario']
        
    def validate(self, attrs):
        nome = attrs.get('nome', '').strip()
        descricao = attrs.get('descricao', '').strip()

        if Restaurante.objects.filter(nome__iexact=nome, descricao__iexact=descricao).exists():
            raise serializers.ValidationError("Já existe um restaurante com esse nome e descrição.")

        return attrs
        
    def validate_usuario(self,value):
        if value.role != 'Cozinheiro':
            raise serializers.ValidationError("Somente usuários com cargo 'cozinheiro' podem criar restaurantes.")
        return value 
    
    def create(self, validated_data):
        request = self.context.get('request')
        usuario = request.user if request else None
        return Restaurante.objects.create(usuario=usuario, **validated_data)
        